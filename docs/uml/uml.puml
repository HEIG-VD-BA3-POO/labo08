@startuml
!pragma layout elk
skinparam linetype ortho
skinparam roundCorner 0
skinparam classAttributeIconSize 0
skinparam ClassBackgroundColor #OldLace
skinparam NoteBackgroundColor #OldLace
skinparam Shadowing false
top to bottom direction

<style>
    classDiagram {
        .provided {
            BackgroundColor GhostWhite
            LineColor DimGrey
            FontColor DimGrey
        }
    }
</style>

hide <<provided>> stereotype

interface ChessController<<provided>> {
    + start(view: ChessView): void
    + newGame(): void
    + move(fromX: int, fromY: int, toX: int, toY: int): boolean
}

interface UserChoice<<provided>> {
    + textValue(): String
}

' interface "DrawableResource<E>"<<provided>> {
'     + getResource(): E
' }

interface ChessView<<provided>> {
    + startView(): void
    + removePiece(x: int, y: int): void
    + putPiece(type: PieceType, color: PlayerColor, x: int, y: int): void
    + displayMessage(msg: String): void
}

' note left of ChessView
'     T implements User Choice: <T extends User Choice> in Java
' end note

' abstract class "BaseView<E>"<<provided>> implements ChessView {
'     + registerResource(type: PieceType, color: PlayerColor, res: DrawableResource<E>): void
'     # loadResourceFor(type: PieceType, color: PlayerColor, def: Resource): DrawableResource<E>
' }

' class GUIView<<provided>> extends "BaseView<E>" {
'     + startView(): void
'     + removePiece(x: int, y: int): void
'     + putPiece(x: int, y: int, type: PieceType, color: PlayerColor): void
' + displayMessage(msg: String): void
'     + askUser<T>(title: String, question: String, possibilities: ...T): T
' }

' class ConsoleView<<provided>> extends "BaseView<E>" {
'     + startView(): void
'     + removePiece(x: int, y: int): void
'     + putPiece(x: int, y: int, type: PieceType, color: PlayerColor): void
'     + displayMessage(msg: String): void
'     + askUser<T>(title: String, question: String, possibilities: ...T): T
' }

class ChessEngine implements ChessController {
    + start(view: ChessView): void
    + newGame(): void
    + move(fromX: int, fromY: int, toX: int, toY: int): boolean

    - nextTurn(): void
    - getOpponentPlayer(): PlayerColor
    - updateState(): void
}

interface ChessBoardWriter {
    + put(pos: Position, piece: ChessPiece): void
    + remove(pos: Position): void
    + clear(): void
    + setLastMove(chessMove: ChessMove): void
    + handlePawnPromotion(pos: Position): void
}

interface ChessBoardReader {
    + get(pos: Position): ChessPiece
    + getPieces(): Map<Position, ChessPiece>
    + containsKey(pos: Position): boolean
    + getLastMove(): ChessMove
    + isSquareAttacked(postition: Position, color: PlayerColor, ignore: PieceType): boolean
}

class ChessBoardController implements ChessBoardWriter {
    + getView(): ChessView
    + getBoard(): ChessBoard

    + put(pos: Position, piece: ChessPiece): void
    + remove(pos: Position): void
    + clear(): void
    + setLastMove(chessMove: ChessMove): void
    + handlePawnPromotion(pos: Position): void
}

interface Cloneable<<provided>> {}

class ChessBoard implements ChessBoardReader, ChessBoardWriter, Cloneable {
    + getValidator(): ChessBoardStateValidator

    + get(pos: Position): ChessPiece
    + getPieces(): Map<Position, ChessPiece>
    + containsKey(pos: Position): boolean
    + getLastMove(): ChessMove
    + isSquareAttacked(postition: Position, color: PlayerColor): boolean

    + put(pos: Position, piece: ChessPiece): void
    + remove(pos: Position): void
    + clear(): void
    + setLastMove(chessMove: ChessMove): void
    + handlePawnPromotion(pos: Position): void

    ~ getKings(): Map<PlayerColor, ChessPiece>

    + clone(): ChessBoard
}

class ChessBoardStateValidator {
    + isCheckmate(color: PlayerColor): boolean
    + isStalemate(color: PlayerColor): boolean
    + isValidMove(move: ChessMove, turnColor: PlayerColor): boolean
    + isDraw(): boolean
    + isKingInCheck(color: PlayerColor): boolean

    ~ isSquareAttacked(postition: Position, color: PlayerColor, ignore: PieceType): boolean

    - hasNoLegalMoves(color: PlayerColor): boolean
    - hasLegalMove(piece: ChessPiece, position: Position): boolean
    - wouldResultInCheck(move: ChessMove, turnColor: PlayerColor): boolean
}

class MaterialCounter {
    ~ isInsufficientMaterial(): boolean

    - isKingVsKing(): boolean
    - isKingAndMinorPieceVsKing(): boolean
    - isKingAndBishopVsKingAndBishop(): boolean
    - areBishopsOnSameColoredSquares(): boolean
    - findBishopPosition(color: PlayerColor): Position
    - isBishopOfColor(piece: ChessPiece, color: PlayerColor): boolean
    - countPieces(): PieceCount[]
}
class PieceCount<<static>> {
    - total: int = 0
    - bishops: int = 0

    - isKingOnly(): boolean
    - isKingAndBishop(): boolean
    - isKingPlusOneMinorPiece(): boolean
}

abstract class ChessBoardInitializer {
    - BOARD_SIZE: int = 8
    - WHITE_BACK ROW: int = 0
    - WHITE_PAWN_ROW: int = 1
    - BLACK_BACK_ROW: int = 7
    - BLACK_PAWN_ROW: int = 6

    + {static} initializeBoard(board: ChessBoard): void

    - {static} initializeStandardGame(board: ChessBoardWriter): void
    - {static} placePieces(board: ChessBoardWriter, row: int, color: PlayerColor): void
    - {static} placePawns(board: ChessBoardWriter, row: int, color: PlayerColor): void
    - {static} placePiece(board: ChessBoardWriter, x: int, y: int, piece: ChessPiece): void
}

class Position {
    + {static} MAX_X: int = 7
    + {static} MAX_Y: int = 7

    + isValid(): boolean
    + dist(other: Position): int
    + add(other: Position): Position
    + sub(other: Position): Position
    + abs(): Position
    + getColor(): PlayerColor
    + toString(): String
}

enum PlayerColor<<provided>> {
    WHITE
    BLACK
}

enum PieceType<<provided>> {
    PAWN
    ROOK
    KNIGHT
    BISHOP
    QUEEN
    KING
}

abstract class ChessPiece implements Cloneable {
    - hasMoved: boolean

    + getType(): PieceType
    + getColor(): PlayerColor
    + isOpponent(other: ChessPiece): boolean
    + markMoved(): void
    + hasMoved(): boolean
    + getPossibleMoves(board: ChessBoardReader, from: Position): Moves
    + clone(): ChessPiece
}
abstract class PromotableChessPiece extends ChessPiece implements UserChoice {
    + textValue(): String
}
class Pawn extends ChessPiece {
    + getPossibleMoves(board: ChessBoardReader, from: Position): Moves

    - isValidMove(board: ChessBoardReader, from: Position, to: Position): boolean
    - createAppropriateMove(from: Position, to: Position): ChessMove
    - createCaptureMove(from: Position, to: Position): ChessMove
    - createForwardMove(from: Position, to: Position): ChessMove
    - addEnPassantMoves(board: ChessBoardReader, from: Position, moves: Moves): void
    - isValidEnPassantPosition(board: ChessBoardReader, adjacent: Position): boolean
    - isDiagonalMove(from: Position, to: Position): boolean
    - isValidCapture(board: ChessBoardReader, to: Position): boolean
    - isPawnAtPosition(board: ChessBoardReader, pos: Position): boolean
    - wasDoublePawnAdvance(move: ChessMove): boolean
    - isAtPromotionRank(pos: Position): boolean
}
class Rook extends PromotableChessPiece {}
class Knight extends PromotableChessPiece {}
class Bishop extends PromotableChessPiece {}
class Queen extends PromotableChessPiece {}
class King extends ChessPiece {
    + getPossibleMoves(board: ChessBoardReader, from: Position): Moves
    
    - getCastlingMoves(board: ChessBoardReader, from: Position)
    - canCastle(board: ChessBoardReader, from: Position, to: Position): boolean
    - getRookPosition(from: Position, direction: Direction): Position
    - isValidRook(rook: ChessPiece): boolean
    - areSquaresBetweenEmptyAndSafe(board: ChessBoardReader, from: Position, rookPos: Position): boolean
}


abstract class MoveGenerator implements Cloneable {
    + {abstract} generate(board: ChessBoardReader, from: Position): Moves
    + clone(): MoveGenerator
}
class DirectionalGenerator extends MoveGenerator {
    + generate(board: ChessBoardReader, from: Position): Moves
}
class KnightGenerator extends MoveGenerator {
    - {static} KNIGHT_MOVES: int[][]

    + generate(board: ChessBoardReader, from: Position): Moves
}
class DistanceGenerator extends MoveGenerator {
    - maxDistance: int

    + getMaxDistance(): int
    + setMaxDistance(maxDistance: int): void
    + generate(board: ChessBoardReader, from: Position): Moves
    + clone(): DistanceGenerator
}
class PawnDistanceGenerator extends DistanceGenerator {
    + generate(board: ChessBoardReader, from: Position): Moves
}

enum Direction {
    FORWARDS
    BACKWARDS
    LEFT
    RIGHT
    FORWARDS_LEFT
    FORWARDS_RIGHT
    BACKWARDS_LEFT
    BACKWARDS_RIGHT

    + {static} ALL: List<Direction>
    + {static} STRAIGHT: List<Direction>
    + {static} DIAGONAL: List<Direction>

    - dx: int
    - dy: int

    + add(position: Position): Position
    + toString(): String

    - getDy(color: PlayerColor): int
}

class Moves {
    + addMove(move: ChessMove): void
    + extendMoves(moves: Moves): void
    + getMove(position: Position): ChessMove
    + getAllMoves(): Collection<ChessMove>
    + toString(): String
}

abstract class ChessMove {
    + getFrom(): Position
    + getTo(): Position
    + getFromPiece(): ChessPiece
    + execute(board: ChessBoardWriter): void
    + toString(): String
}

class StandardMove extends ChessMove {
    + execute(board: ChessBoardWriter): void
}
class Capture extends ChessMove {
    + execute(board: ChessBoardWriter): void
}
class EnPassant extends StandardMove {
    + execute(board: ChessBoardWriter): void
}
abstract class Castling extends ChessMove {
    + execute(board: ChessBoardWriter): void
}
class LongCastling extends Castling {}
class ShortCastling extends Castling {}
class Promotion extends StandardMove {
    + execute(board: ChessBoardWriter): void
}
class PromotionWithCapture extends Capture {
    + execute(board: ChessBoardWriter): void
}

ChessController "1" --> "1" ChessView : manage ▸

ChessEngine "1" *-- "1" ChessBoardController : manages ▸
ChessEngine "1" --> "1" PlayerColor : hasTurn ▸
ChessEngine -[#8e8e8e]-> ChessBoardInitializer : usesStatically ▸\n<color #8e8e8e>**Note:** This is not a real association.\n<color #8e8e8e>We only indicate that the ChessEngine\n<color #8e8e8e>class uses the ChessBoardInitializer statically.

ChessBoardController "1" *-- "1" ChessBoard : controls ▸
ChessBoardController "1" --> "1" ChessView : controls ▸
ChessBoard "1" *-- "2..32" ChessPiece : composedOf ▸
ChessBoard "1" *-- "2" Position : tracks ▸
ChessBoard "1" *-- "1" ChessMove : tracks ▸
ChessBoardStateValidator "1" *-- "1" ChessBoard : validates ▸
ChessBoardStateValidator "1" *-- "1" MaterialCounter : counts ▸
MaterialCounter "1" *-- "1" ChessBoardReader : reads ▸
MaterialCounter "1" --> "1" PieceCount : hasWhite ▸
MaterialCounter "1" --> "1" PieceCount : hasBlack ▸

ChessPiece "1" --> "1" PieceType : represents ▸
ChessPiece "1" --> "1" PlayerColor : belongsTo ▸
ChessPiece "1" *-- "1..*" MoveGenerator : composedOf ▸

DirectionalGenerator "1" o-- "1..*" Direction : defines ▸
DistanceGenerator "1" *-- "1..*" DirectionalGenerator : uses ▸

ChessMove "1" *-- "1" Position : startsAt ▸
ChessMove "1" *-- "1" Position : endsAt ▸
ChessMove "1" *-- "1" ChessPiece : moves ▸
Moves "1" *-- "*" ChessMove : includes ▸
EnPassant "1" *-- "1" Position : captures ▸
Castling "1" *-- "1" Position : rookStartsAt ▸
Castling "1" *-- "1" Position : rookEndsAt ▸
Castling "1" *-- "1" ChessPiece : movesWith ▸

@enduml
