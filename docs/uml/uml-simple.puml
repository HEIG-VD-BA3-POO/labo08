@startuml
!pragma layout elk
hide empty methods
hide empty attributes
skinparam linetype ortho
skinparam roundCorner 0
skinparam classAttributeIconSize 0
skinparam ClassBackgroundColor #OldLace
skinparam NoteBackgroundColor #OldLace
skinparam Shadowing false
top to bottom direction

<style>
    classDiagram {
        .provided {
            BackgroundColor GhostWhite
            LineColor DimGrey
            FontColor DimGrey
        }
    }
</style>

hide <<provided>> stereotype

interface ChessController<<provided>> {}

interface UserChoice<<provided>> {}

' interface "DrawableResource<E>"<<provided>> {
'     + getResource(): E
' }

interface ChessView<<provided>> {}

' note left of ChessView
'     T implements User Choice: <T extends User Choice> in Java
' end note

' abstract class "BaseView<E>"<<provided>> implements ChessView {
'     + registerResource(type: PieceType, color: PlayerColor, res: DrawableResource<E>): void
'     # loadResourceFor(type: PieceType, color: PlayerColor, def: Resource): DrawableResource<E>
' }

' class GUIView<<provided>> extends "BaseView<E>" {
'     + startView(): void
'     + removePiece(x: int, y: int): void
'     + putPiece(x: int, y: int, type: PieceType, color: PlayerColor): void
' + displayMessage(msg: String): void
'     + askUser<T>(title: String, question: String, possibilities: ...T): T
' }

' class ConsoleView<<provided>> extends "BaseView<E>" {
'     + startView(): void
'     + removePiece(x: int, y: int): void
'     + putPiece(x: int, y: int, type: PieceType, color: PlayerColor): void
'     + displayMessage(msg: String): void
'     + askUser<T>(title: String, question: String, possibilities: ...T): T
' }

class ChessEngine implements ChessController {}

interface ChessBoardWriter {}

interface ChessBoardReader {}

class ChessBoardController implements ChessBoardWriter {}

interface Cloneable<<provided>> {}

class ChessBoard implements ChessBoardReader, ChessBoardWriter, Cloneable {}

abstract class ChessBoardInitializer {}

class Position {}

enum PlayerColor<<provided>> {
    WHITE
    BLACK
}

enum PieceType<<provided>> {
    PAWN
    ROOK
    KNIGHT
    BISHOP
    QUEEN
    KING
}

abstract class ChessPiece implements Cloneable {}
abstract class PromotableChessPiece extends ChessPiece implements UserChoice {}
class Pawn extends ChessPiece {}
class Rook extends PromotableChessPiece {}
class Knight extends PromotableChessPiece {}
class Bishop extends PromotableChessPiece {}
class Queen extends PromotableChessPiece {}
class King extends ChessPiece {}


abstract class MoveGenerator implements Cloneable {}
class DirectionalGenerator extends MoveGenerator {}
class KnightGenerator extends MoveGenerator {}
class DistanceGenerator extends MoveGenerator {}
class PawnDistanceGenerator extends DistanceGenerator {}

enum Direction {
    FORWARDS
    BACKWARDS
    LEFT
    RIGHT
    FORWARDS_LEFT
    FORWARDS_RIGHT
    BACKWARDS_LEFT
    BACKWARDS_RIGHT
}

class Moves {}

abstract class ChessMove {}

class StandardMove extends ChessMove {}
class Capture extends ChessMove {}
class EnPassant extends StandardMove {}
abstract class Castling extends ChessMove {}
class LongCastling extends Castling {}
class ShortCastling extends Castling {}
class Promotion extends StandardMove {}
class PromotionWithCapture extends Capture {}

ChessController "1" --> "1" ChessView : manage ▸

ChessEngine "1" *-- "1" ChessBoardController : manages ▸
ChessEngine "1" --> "1" PlayerColor : hasTurn ▸
ChessEngine -[#8e8e8e]-> ChessBoardInitializer : usesStatically ▸\n<color #8e8e8e>**Note:** This is not a real association.\n<color #8e8e8e>We only indicate that the ChessEngine\n<color #8e8e8e>class uses the ChessBoardInitializer statically.
ChessBoardController "1" *-- "1" ChessBoard : controls ▸
ChessBoardController "1" --> "1" ChessView : controls ▸
ChessBoard "1" *-- "2..32" ChessPiece : composedOf ▸
ChessBoard "1" *-- "2" Position : tracks ▸
ChessBoard "1" *-- "1" ChessMove : tracks ▸
ChessPiece "1" --> "1" PieceType : represents ▸
ChessPiece "1" --> "1" PlayerColor : belongsTo ▸
ChessPiece "1" *-- "1..*" MoveGenerator : composedOf ▸

DirectionalGenerator "1" o-- "1..*" Direction : defines ▸
DistanceGenerator "1" *-- "1..*" DirectionalGenerator : uses ▸

ChessMove "1" *-- "1" Position : startsAt ▸
ChessMove "1" *-- "1" Position : endsAt ▸
ChessMove "1" *-- "1" ChessPiece : moves ▸
Moves "1" *-- "*" ChessMove : includes ▸
EnPassant "1" *-- "1" Position : captures ▸
Castling "1" *-- "1" Position : rookStartsAt ▸
Castling "1" *-- "1" Position : rookEndsAt ▸
Castling "1" *-- "1" ChessPiece : movesWith ▸

@enduml
