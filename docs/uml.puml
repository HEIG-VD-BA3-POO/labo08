@startuml
!pragma layout elk
skinparam linetype ortho
skinparam roundCorner 0
skinparam classAttributeIconSize 0
skinparam ClassBackgroundColor #OldLace
skinparam NoteBackgroundColor #OldLace
skinparam Shadowing false
top to bottom direction

<style>
    classDiagram {
        .provided {
            BackgroundColor GhostWhite
            LineColor DimGrey
            FontColor DimGrey
        }
    }
</style>

hide <<provided>> stereotype

interface ChessController<<provided>> {
    + start(view: ChessView): void
    + newGame(): void
    + move(fromX: int, fromY: int, toX: int, toY: int): boolean
}

interface UserChoice<<provided>> {
    + textValue(): String
}

interface "DrawableResource<E>"<<provided>> {
    + getResource(): E
}

interface ChessView<<provided>> {
    + startView(): void
    + removePiece(x: int, y: int): void
    + putPiece(type: PieceType, color: PlayerColor, x: int, y: int): void
    + displayMessage(msg: String): void
}

note left of ChessView
    T implements User Choice: <T extends User Choice> in Java
end note

abstract class "BaseView<E>"<<provided>> implements ChessView {
    + registerResource(type: PieceType, color: PlayerColor, res: DrawableResource<E>): void
    # loadResourceFor(type: PieceType, color: PlayerColor, def: Resource): DrawableResource<E>
}

class GUIView<<provided>> extends "BaseView<E>" {
    + startView(): void
    + removePiece(x: int, y: int): void
    + putPiece(x: int, y: int, type: PieceType, color: PlayerColor): void
    + displayMessage(msg: String): void
    + askUser<T>(title: String, question: String, possibilities: ...T): T
}

class ConsoleView<<provided>> extends "BaseView<E>" {
    + startView(): void
    + removePiece(x: int, y: int): void
    + putPiece(x: int, y: int, type: PieceType, color: PlayerColor): void
    + displayMessage(msg: String): void
    + askUser<T>(title: String, question: String, possibilities: ...T): T
}

class ChessEngine implements ChessController {
    + startGame(): void
    + movePiece(fromX: int, fromY: int, x: int, y: int): void
}

enum GameState {
    IN_PROGRESS
    CHECK
    CHECKMATE
    STALEMATE
    DRAW
}

interface ChessBoardView {
    ChessPiece get(Position pos)
    boolean containsKey(Position pos)
}

class ChessBoard implements ChessBoardView {}

static class ChessBoardInitialzer<<static>> {}

class Position {}

enum PlayerColor<<provided>> {
    WHITE
    BLACK
}

enum PieceType<<provided>> {
    PAWN
    ROOK
    KNIGHT
    BISHOP
    QUEEN
    KING
}

abstract class ChessPiece {
    - boolean: hasMoved
    + Moves getMoves(ChessBoardView board, Position from)
}
abstract class PromotableChessPiece extends ChessPiece implements UserChoice {}
class Pawn extends ChessPiece {}
class Rook extends PromotableChessPiece {}
class Knight extends PromotableChessPiece {}
class Bishop extends PromotableChessPiece {}
class Queen extends PromotableChessPiece {}
class King extends ChessPiece {}


interface MoveGenerator {
    + Moves generate(ChessBoardView board, Position from)
}
class DirectionalGenerator implements MoveGenerator {}
class CastlingDirectionalGenerator extends DirectionalGenerator {}
class KnightGenerator implements MoveGenerator {}
class DistanceGenerator implements MoveGenerator {}
class PawnDistanceGenerator extends DistanceGenerator {}

enum Direction {
    FORWARDS
    BACKWARDS
    LEFT
    RIGHT
    FORWARDS_LEFT
    FORWARDS_RIGHT
    BACKWARDS_LEFT
    BACKWARDS_RIGHT
}

class Move {
    + void apply(ChessBoard board)
}

class Moves {}

enum MoveType {
    VERTICAL
    HORIZONTAL
    DIAGONAL
    OTHER
}

class Capture extends Move {}
class Check extends Move {}
class EnPassant extends Move {}
class Castling extends Move {}
class Promotion extends Move {}

ChessController "1" --> "1" ChessView : manage >
"BaseView<E>" "1" --> "1" ChessController : callback >
"BaseView<E>" "0..*" --> "0..*" "DrawableResource<E>" : store >

ChessEngine "1" --> "1" ChessBoard : has >
ChessEngine "1" --> "1" PlayerColor : has >
ChessBoard "1" --> "1" ChessView : has >
ChessBoard "1" --> "2..32" ChessPiece : has >
ChessBoard "1" --> "2..32" Position : has >
ChessPiece "1" --> "1..*" MoveGenerator : has >
ChessPiece "1" --> "1" PieceType : has >
ChessPiece "1" --> "1" PlayerColor : has >

DirectionalGenerator "*" --> "1..*" Direction : has >
DistanceGenerator "1" --> "*" DirectionalGenerator : has >

Move "1" --> "2" Position : has >
Move "1" --> "1" MoveType : has >
Moves "1" --> "*" Move : has >

@enduml
